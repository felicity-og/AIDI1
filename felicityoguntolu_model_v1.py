# -*- coding: utf-8 -*-
"""FelicityOguntolu_model_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kC4KjPNYTurnwWWr7P5BCUjbBRnemewK

#Breast Cancer Diagnosis
###Classification problem (UCI dataset)

###Step 1: Import Libraries and Load Data

We start by importing the necessary libraries and loading the Heart Disease UCI dataset.
"""

!pip install ucimlrepo

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn.tree import plot_tree
from sklearn.model_selection import GridSearchCV

from ucimlrepo import fetch_ucirepo

# fetch dataset
breast_cancer_wisconsin_diagnostic = fetch_ucirepo(id=17)

# data (as pandas dataframes)
X = breast_cancer_wisconsin_diagnostic.data.features
y = breast_cancer_wisconsin_diagnostic.data.targets
new_y=np.ravel(y)
# metadata
print(breast_cancer_wisconsin_diagnostic.metadata)

# variable information
print(breast_cancer_wisconsin_diagnostic.variables)

"""###Step 2: Split datasets

Split the dataset in training and testing sets. Here, we will use an 80/20 split.
"""

X_train, X_test, y_train, y_test = train_test_split(X, new_y, test_size=0.2, random_state=42)

print(new_y)

"""###Step 3: Build and Train the Decision Tree

Create a Decision Tree Classifier and train it using the training data.
"""

# Create a Random Forest Classifier
rf_classifier = RandomForestClassifier(random_state=42)
# RandomForestClassifier(n_estimators=100)
# Train the model
rf_classifier.fit(X_train, y_train)

"""###Step 4: Evaluate the Decision Tree

Make predictions on the test set, calculate accuracy, generate a classification report, and create a confusion matrix to evaluate the model's performance.
"""

# Make predictions
y_pred = rf_classifier.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Generate a classification report
class_report = classification_report(y_test, y_pred)
print('Classification Report:\n', class_report)

# Create a confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', conf_matrix)

from sklearn.metrics import confusion_matrix
import seaborn as sns
# Get the confusion matrix
cm = confusion_matrix(y_test, y_pred)
# Plotting the confusion matrix
plt.figure(figsize=(10,7))
sns.heatmap(cm, annot=True, fmt='g', cmap="Blues")
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""###Step 5: Visual Inspection of the Decision Tree

Visualize the decision tree to understand its structure and the decisions it makes.
"""

# Visualize the decision tree
plt.figure(figsize=(12, 8))
plot_tree(rf_classifier[2], filled=True, feature_names=X.columns, class_names=True, rounded=True)
plt.show()

# show the level of influence each feature has on the outcome of the model
importances = rf_classifier.feature_importances_
std = np.std([tree.feature_importances_ for tree in rf_classifier.estimators_], axis=0)

print(importances)
print(std)

"""### **Conclusion:**

Due to the nature of the problem, selection of the appropriate classification model(high precision and accuracy) such as the Decision tree classifier, is necessary.


The model produces an accuracy of 96% further displayed in the confusion matrix. With such a high accuracy, the model can be used to accurately predict the classes of breast cancer: Benign or Malignant.
"""